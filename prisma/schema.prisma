generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  verified  DateTime

  provider String? 
  providerId String?
  
  cart     Cart?
  order    Order[]
  verificationCode VerificationCode?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id         Int          @id @default(autoincrement())
  name       String
  imageUrl   String

  category   Category     @relation(fields: [categoryId], references: [id])
  categoryId Int
  
  ingredients Ingredient[]
  items      ProductItem[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  
}

model ProductItem {
  id        Int      @id @default(autoincrement())
  price     Int
  size      Int?
  type      Int?

  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  cartItems CartItem[]
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  imageUrl  String

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?       @unique

  items       CartItem[]

  token       String

  totalAmount Int        @default(0)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model CartItem {
  id             Int          @id @default(autoincrement())
  cart           Cart         @relation(fields: [cartId], references: [id])
  cartId         Int

  productItem    ProductItem  @relation(fields: [productItemId], references: [id])
  productItemId  Int

  quantity       Int
  ingredients    Ingredient[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}


model Order {
  id            Int          @id @default(autoincrement())

  user          User?        @relation(fields: [userId], references: [id])
  userId Int?

  token String 

  totalAmount Int
  status OrderStatus
  paymentId String?
  
  Items Json

  fullName String
  email    String
  phone    String
  address  String
  comment  String

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
}

model VerificationCode {
  id            Int          @id @default(autoincrement())

  user          User         @relation(fields: [userId], references: [id])
  userId        Int          @unique

  code          String       @unique

  createdAt     DateTime     @default(now())

   @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEDED
  CANCELLED
} 

enum UserRole {
  USER 
  ADMIN
}